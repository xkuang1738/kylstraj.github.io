{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","reducers/events/eventsReducer.js","reducers/events/eventsConstants.js","reducers/rootReducer.js","reducers/store.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","initialState","events","eventsReducer","state","arguments","length","undefined","action","type","Object","objectSpread","defineProperty","event","id","keys","reduce","newEvents","eventId","update","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kOCyBzBC,MArBf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4FChBAC,EAAe,CACnBC,OAAQ,IAuCKC,EApCO,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQC,EAAOC,MACb,ICRqB,YDSnB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEF,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACFN,EAAMF,OADLQ,OAAAE,EAAA,EAAAF,CAAA,GAEHF,EAAOK,MAAMC,GAAKN,EAAOK,UAGhC,ICfwB,eDgBtB,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEF,OAAQQ,OAAOK,KAAKX,EAAMF,QAAQc,OAAO,SAACC,EAAWH,GAAZ,OAAoBA,IAAON,EAAOU,QACzED,EAD2DP,OAAAC,EAAA,EAAAD,CAAA,GAGtDO,EAHsDP,OAAAE,EAAA,EAAAF,CAAA,GAIxDI,EAAKV,EAAMF,OAAOY,SAG3B,ICxBwB,eDyBtB,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEF,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACFN,EAAMF,OADLQ,OAAAE,EAAA,EAAAF,CAAA,GAEHF,EAAOU,QAFJR,OAAAC,EAAA,EAAAD,CAAA,GAGCN,EAAMF,OAAOM,EAAOU,SACpBV,EAAOW,YAIlB,QACE,OAAOf,IE9BEgB,EAJKC,YAAgB,CAClCnB,OAAQC,ICDJmB,EAAmBzB,OAAO0B,sCAAwCC,IAOzDC,EALDC,YACZN,EACAE,EAAiBK,YAAgBC,OCAnCC,IAASC,OACP5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUN,MAAOA,GACfvC,EAAAC,EAAAC,cAAC4C,EAAD,OAEFC,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c225718.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_EVENT, REMOVE_EVENT, UPDATE_EVENT } from './eventsConstants';\n\nconst initialState = {\n  events: {},\n};\n\nconst eventsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_EVENT:\n      return {\n        ...state,\n        events: {\n          ...state.events,\n          [action.event.id]: action.event,\n        },\n      };\n    case REMOVE_EVENT:\n      return {\n        ...state,\n        events: Object.keys(state.events).reduce((newEvents, id) => (id === action.eventId ?\n          newEvents :\n          {\n            ...newEvents,\n            [id]: state.events[id],\n          })),\n      };\n    case UPDATE_EVENT:\n      return {\n        ...state,\n        events: {\n          ...state.events,\n          [action.eventId]: {\n            ...state.events[action.eventId],\n            ...action.update,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default eventsReducer;\n","export const ADD_EVENT = 'ADD_EVENT';\nexport const REMOVE_EVENT = 'REMOVE_EVENT';\nexport const UPDATE_EVENT = 'UPDATE_EVENT';\n","import { combineReducers } from 'redux';\n\nimport eventsReducer from './events/eventsReducer';\n\nconst rootReducer = combineReducers({\n  events: eventsReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './reducers/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}